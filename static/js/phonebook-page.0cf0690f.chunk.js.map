{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactList/fade.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","views/PhoneBookPage/PhoneBookPage.js"],"names":["module","exports","contactsOperations","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","massage","addContact","nam","tel","contact","name","number","addContactsRequest","post","addContactsSuccess","addContactsError","deleteContacts","Id","deleteContactsRequest","console","log","delete","deleteContactsSuccess","deleteContactsError","getContacts","state","contacts","getFilter","filter","contactsSelector","getLoading","loading","getError","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","handleChangeName","e","setState","currentTarget","value","handleChangeNumber","handleSubmit","preventDefault","props","find","toast","onSubmit","this","nameId","shortid","generate","telId","Box","m","FormLabel","for","Input","color","id","type","onChange","Button","variant","Component","connect","changeFilter","target","findId","items","onDeleteNumber","TransitionGroup","component","List","map","item","CSSTransition","timeout","classNames","PhoneList","ListItem","className","s","onClick","PhoneBookPage","setTimeout","clearError","Grid","container","direction","justify","alignItems","Container","maxWidth","in","appear","unmountOnExit","height","width"],"mappings":"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","file":"static/js/phonebook-page.0cf0690f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3cId7\",\"item\":\"ContactList_item__11Dzs\",\"button\":\"ContactList_button__2jypO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter___DHth\",\"enterActive\":\"fade_enterActive__6VbF5\",\"exit\":\"fade_exit__1AZIX\",\"exitActive\":\"fade_exitActive__3DX3T\"};","import axios from 'axios';\nimport {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  deleteContactsError,\n} from './contacts-action';\n\n// axios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\n\nexport const fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error.massage)));\n};\n\nexport const addContact = (nam, tel) => dispatch => {\n  const contact = {\n    name: nam,\n    number: tel,\n  };\n\n  dispatch(addContactsRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactsSuccess(data)))\n    .catch(error => dispatch(addContactsError(error.massage)));\n};\n\nexport const deleteContacts = Id => dispatch => {\n  dispatch(deleteContactsRequest());\n  console.log(Id);\n  axios\n    .delete(`/contacts/${Id}`)\n    .then(() => dispatch(deleteContactsSuccess(Id)))\n    .catch(error => dispatch(deleteContactsError(error.massage)));\n};\nconst contactsOperations = { fetchContacts, addContact, deleteContacts };\n\nexport default contactsOperations;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.contacts.loading;\nconst getError = state => state.contacts.error;\n\nconst getContacts = state => state.contacts.contacts;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nconst contactsSelector = {\n  getLoading,\n  getError,\n  getContacts,\n  getFilter,\n  getVisibleContacts,\n};\n\nexport default contactsSelector;\n","import React, { Component } from 'react';\nimport { Button, Input, Box, FormLabel } from '@material-ui/core';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelector } from '../../redux/contacts';\n// import s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChangeName = e => {\n    this.setState({\n      name: e.currentTarget.value,\n    });\n  };\n\n  handleChangeNumber = e => {\n    this.setState({\n      number: e.currentTarget.value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    if (this.props.contacts.find(contact => contact.name === name)) {\n      console.log(name);\n      toast.error(`${name} is already in contacts!!!`);\n      return;\n    }\n\n    this.props.onSubmit(name, number);\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    const nameId = shortid.generate();\n    const telId = shortid.generate();\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <Box m={1}>\n          <FormLabel for={nameId}> Name </FormLabel>\n          <Input\n            color=\"secondary\"\n            // className={s.input}\n            id={nameId}\n            type=\"text\"\n            value={name}\n            onChange={this.handleChangeName}\n          />\n          <FormLabel for={telId}> Number </FormLabel>\n          <Input\n            color=\"secondary\"\n            // className={s.input}\n            id={telId}\n            type=\"text\"\n            value={number}\n            onChange={this.handleChangeNumber}\n          />\n        </Box>\n        <Button type=\"submit\" variant=\"contained\" color=\"secondary\">\n          Add contact\n        </Button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelector.getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (nam, tel) => dispatch(contactsOperations.addContact(nam, tel)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import shortid from 'shortid';\nimport { Input, FormLabel } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { changeFilter, contactsSelector } from '../../redux/contacts';\n\nfunction Filter({ value, onChange }) {\n  const findId = shortid.generate();\n  return (\n    <>\n      <FormLabel for={findId}>Find contacts by name</FormLabel>\n      <Input\n        color=\"secondary\"\n        id={findId}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n}\n\nconst mapStateToProps = state => ({\n  value: contactsSelector.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport { Button, ListItem, List } from '@material-ui/core';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelector } from '../../redux/contacts';\n\nimport s from './ContactList.module.css';\nimport PhoneList from './fade.module.css';\n\nfunction ContactList({ items, onDeleteNumber }) {\n  return (\n    <TransitionGroup component={List}>\n      {items.map(item => (\n        <CSSTransition key={item.id} timeout={250} classNames={PhoneList}>\n          <ListItem key={item.id} className={s.item}>\n            <span>\n              {item.name}:<span> </span>\n              {item.number}\n            </span>\n            <Button\n              type=\"button\"\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => onDeleteNumber(item.id)}\n            >\n              Delete\n            </Button>\n          </ListItem>\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n}\n\nconst mapStateToProps = state => ({\n  items: contactsSelector.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteNumber: id => dispatch(contactsOperations.deleteContacts(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from 'react';\nimport { Container, Box, Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport {\n  clearError,\n  contactsSelector,\n  contactsOperations,\n} from '../../redux/contacts';\n// import Container from 'components/Container';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList';\n\nclass PhoneBookPage extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  componentDidUpdate() {\n    if (this.props.error !== null) {\n      toast.error('No Network');\n      setTimeout(this.props.clearError(), 500);\n    }\n  }\n  render() {\n    return (\n      <>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"baseline\">\n          <Container maxWidth=\"sm\">\n            <CSSTransition\n              in={true}\n              appear={true}\n              timeout={250}\n              classNames=\"Logo\"\n              unmountOnExit\n            >\n              <h1>Phonebook</h1>\n            </CSSTransition>\n            <ContactForm />\n\n            <Box m={1}>\n              <Filter />\n            </Box>\n          </Container>\n          <Container maxWidth=\"sm\">\n            {this.props.loading && (\n              <Loader type=\"Rings\" color=\"#00BFFF\" height={200} width={200} />\n            )}\n            <ContactList />\n          </Container>\n        </Grid>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loading: contactsSelector.getLoading(state),\n  error: contactsSelector.getError(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n  clearError: () => dispatch(clearError()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneBookPage);\n"],"sourceRoot":""}